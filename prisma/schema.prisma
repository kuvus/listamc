// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  servers       Server[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Server {
  id             Int             @id @default(autoincrement())
  address        String
  ownerId        String?
  owner          User?           @relation(fields: [ownerId], references: [id])
  ServerData     ServerData?
  Promotion      Promotion?
  Vote           Vote[]
  ServerMetadata ServerMetadata?

  @@unique([address])
}

model ServerData {
  id             String  @id @default(uuid())
  server_id      Int     @unique
  players_online Int
  players_max    Int
  version        String
  motd           String
  motd_text      String
  icon           String
  online         Boolean
  server         Server  @relation(fields: [server_id], references: [id])
}

model ServerHistory {
  id        String   @id @default(uuid())
  server_id String
  players   Int
  timestamp DateTime
}

model Promotion {
  id         String   @id @default(uuid())
  server_id  Int      @unique
  date_start DateTime
  date_end   DateTime
  server     Server   @relation(fields: [server_id], references: [id])
}

model Vote {
  id        String   @id @default(uuid())
  server_id Int
  date      DateTime @default(now())
  hash      String
  server    Server   @relation(fields: [server_id], references: [id])
}

model Voucher {
  id    String  @id @default(uuid())
  code  String
  value Int
  used  Boolean @default(false)
}

model ServerMetadata {
  id          String @id @default(uuid())
  server_id   Int    @unique
  description String
  gamemodes   Json
  urls        Json
  server      Server @relation(fields: [server_id], references: [id])
}
