// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Server {
  id             Int             @id @default(autoincrement())
  address        String
  ownerId        String?
  owner          Account?        @relation(fields: [accountId], references: [id])
  createdAt      DateTime        @default(now())
  ServerData     ServerData?
  Promotion      Promotion?
  Vote           Vote[]
  Transactions   Transaction[]
  ServerMetadata ServerMetadata?
  accountId      String?

  @@unique([address])
  @@map("server")
}

model ServerData {
  id             String   @id @default(uuid())
  server_id      Int      @unique
  players_online Int
  players_max    Int
  version        String
  motd           String
  motd_text      String
  icon           String
  online         Boolean
  last_update    DateTime @default(now())
  server         Server   @relation(fields: [server_id], references: [id])

  @@map("server_data")
}

model ServerHistory {
  id        String   @id @default(uuid())
  server_id String
  players   Int
  timestamp DateTime

  @@map("server_history")
}

model Promotion {
  id         String   @id @default(uuid())
  server_id  Int      @unique
  date_start DateTime @default(now())
  date_end   DateTime
  server     Server   @relation(fields: [server_id], references: [id])

  @@map("promotion")
}

model Vote {
  id        String   @id @default(uuid())
  server_id Int
  date      DateTime @default(now())
  hash      String
  server    Server   @relation(fields: [server_id], references: [id])

  @@map("vote")
}

model Voucher {
  id    String  @id @default(uuid())
  code  String
  value Int
  used  Boolean @default(false)

  @@map("voucher")
}

model ServerMetadata {
  id          String  @id @default(uuid())
  server_id   Int     @unique
  description String?
  gamemodes   Json?
  urls        Json?
  server      Server  @relation(fields: [server_id], references: [id])

  @@map("server_metadata")
}

model Transaction {
  id           String   @id
  user_id      String?
  server_id    Int
  amount       Int
  email        String?
  payment_type String?
  state        Int      @default(0)
  date         DateTime @default(now())
  Server       Server   @relation(fields: [server_id], references: [id])

  @@map("transaction")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  Server                Server[]

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
